# -*- coding: utf-8 -*-
"""Oficial

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14F20dBVJ6AHSkx_rlIjsvza2ENvF06lG
"""

pip install roboflow

from google.colab import drive
drive.mount("/content/gdrive")

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados

!pwd

# Commented out IPython magic to ensure Python compatibility.
# Download YOLOv7 repository and install requirements
!git clone 'https://github.com/WongKinYiu/yolov7.git'
# %cd yolo7
!pip install -r requirements.txt

import pandas as pd
dados_reais = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/DadosReais.xlsx", usecols=["x", "y"])
dados_reais

dados_yolo = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/planilha_filtrada_final.xlsx", usecols=["Pixel_X", "Pixel_Y"])
dados_yolo

# for row in dados_yolo.iterrows():
#   print(row[0], row[1]["Pixel_X"], row[1]["Pixel_Y"])

from scipy.spatial.distance import cdist

df1 = dados_reais[["x", "y"]].copy()
df1.columns = ["x_real", "y_real"]

df2 = dados_yolo.copy()
df2.columns = ["x_test", "y_test"]

df1_diff = df1[['x_real', 'y_real']].values
df2_diff = df2[['x_test', 'y_test']].values
diff_matrix = cdist(df1_diff, df2_diff)

min_errors = diff_matrix.min(axis=1)

df_min_error = pd.DataFrame({
    'x_real': df1['x_real'],
    'y_real': df1['y_real'],
    'x_test': df2['x_test'].values[diff_matrix.argmin(axis=1)],
    'y_test': df2['y_test'].values[diff_matrix.argmin(axis=1)],
    'min_error': min_errors
})

df_min_error

import matplotlib.pyplot as plt
plt.scatter(df_min_error["x_real"], df_min_error["y_real"], label="real", alpha=0.5)
plt.scatter(df_min_error["x_test"], df_min_error["y_test"], label="test", alpha=0.5)

plt.legend()

df_min_error.columns

dados_yolo_area = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/planilha_filtrada_final.xlsx", usecols=["Área", "Pixel_X", "Pixel_Y"])
dados_yolo_area.columns = ["Área", "x_test", "y_test"]
dados_yolo_area.columns

# Resultado para parear a área de acordo com as coordenadas x e y
df_merge_area = pd.merge(dados_yolo_area, df_min_error, on=["x_test", "y_test"])
df_merge_area.to_excel("df_merge_area.xlsx", index=False)

"""Ele ta gerando a área das caixas
Está gerando as imagens classificadas
### **Imagem 1**
"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/1.tif", confidence=15, overlap=40).json()

# Salva a imagem com as predições
nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/1.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/1.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

"""### **Esses Scripts abaixo realizam a introdução de X, Y, Altura e Largura nas colunas do Planilhas**"""

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_1.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import pandas as pd
import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_1.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/1.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_1.tif.xlsx")  # Substitua "caminho_da_planilha_com_resultados.xlsx" pelo caminho desejado para salvar a planilha

from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/1.tif")
gt = tif.GetGeoTransform()

gt

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

import pandas as pd

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_1.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_1.tif.xlsx")

"""### **Imagem 2**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/2.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/2.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/2.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_2.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_2.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/2.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_2.tif.xlsx")  # Substitua "caminho_da_planilha_com_resultados.xlsx" pelo caminho desejado para salvar a planilha

from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/2.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_2.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_2.tif.xlsx")

"""### **Imagem 3**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/3.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/3.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/3.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_3.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_3.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/3.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_3.tif.xlsx")  # Substitua "caminho_da_planilha_com_resultados.xlsx" pelo caminho desejado para salvar a planilha

from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/3.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_3.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_3.tif.xlsx")

"""# **Imagem 4**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/4.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/4.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/4.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_4.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_4.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/4.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_4.tif.xlsx")  # Substitua "caminho_da_planilha_com_resultados.xlsx" pelo caminho desejado para salvar a planilha

from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/4.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_4.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_4.tif.xlsx")

"""# **Imagem 5**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/5.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/5.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/5.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_5.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_5.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/5.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_5.tif.xlsx")

from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/5.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_5.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_5.tif.xlsx")

"""# **Imagem 6**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/6.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/6.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/6.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_6.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_6.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/6.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_6.tif.xlsx")  # Substitua "caminho_da_planilha_com_resultados.xlsx" pelo caminho desejado para salvar a planilha

from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/6.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_6.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_6.tif.xlsx")

"""# **Imagem 7**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/7.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/7.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/7.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_7.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_7.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/7.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_7.tif.xlsx")  # Substitua "caminho_da_planilha_com_resultados.xlsx" pelo caminho desejado para salvar a planilha

from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/7.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_7.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_7.tif.xlsx")

"""# **Imagem 8**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/8.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/8.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/8.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_8.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_8.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/8.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_8.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/8.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_8.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_8.tif.xlsx")

"""# **Imagem 9**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/9.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/9.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/9.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_9.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_9.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/9.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_9.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/9.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_9.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_9.tif.xlsx")

"""# **Imagem 10**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/10.tif", confidence=15, overlap=40).json()

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': "Cópia de 10.tif", 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = "resultados_caixas_delimitadoras.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/10.tif", confidence=15, overlap=40).save("10(confidence=15, overlap=40).jpg")

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_10.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_10.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/10(confidence=15, overlap=40).jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_10.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/10.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_10.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_10.tif.xlsx")

"""# **Imagem 10**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/11.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/11.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/11.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_11.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_11.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/11.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_11.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/11.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_11.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_11.tif.xlsx")

"""# **Imagem 12**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/12.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/12.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/12.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_12.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_12.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/12.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_12.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/12.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_12.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_12.tif.xlsx")

"""# **Imagem 13**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/13.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/13.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/13.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_13.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_13.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/13.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_13.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/13.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_13.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_13.tif.xlsx")

"""# **Imagem 14**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/14.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/14.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/14.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_14.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_14.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/14.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_14.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/14.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_14.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_14.tif.xlsx")

"""# **Imagem 15**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/15.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/15.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/15.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_15.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_15.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/15.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_15.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/15.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_15.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_15.tif.xlsx")

"""# **Imagem 16**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/16.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/16.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/16.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_16.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_16.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/16.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_16.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/16.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_16.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_16.tif.xlsx")

"""# **Imagem 17**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/17.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/17.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/17.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_17.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_17.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/17.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_17.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/17.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_17.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_17.tif.xlsx")

"""# **Imagem 18**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/18.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/18.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/18.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_18.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_18.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/18.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_18.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/18.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_18.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_18.tif.xlsx")

"""# **Imagem 19**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/19.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/19.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/19.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_19.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_19.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/19.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_19.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/19.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_19.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_19.tif.xlsx")

"""# **Imagem 20**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/20.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/20.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/20.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_20.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_20.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/20.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_20.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/20.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_20.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_20.tif.xlsx")

"""# **Imagem 21**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/21.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/21.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/21.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_21.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_21.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/21.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_21.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/21.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_21.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_21.tif.xlsx")

"""# **Imagem 22**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/22.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/22.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/22.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_22.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_22.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/22.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_22.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/22.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_22.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_22.tif.xlsx")

"""# **Imagem 23**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/23.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/23.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/23.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_23.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_23.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/23.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_23.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/23.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_23.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_23.tif.xlsx")

"""# **Imagem 24**"""

import os
import pandas as pd
from roboflow import Roboflow
rf = Roboflow(api_key="Hwx4AuqyaxlDOAHRwWE7")
project = rf.workspace("araucria").project("araucaria-detect")
dataset = project.version(1).download("yolov7")
model = project.version(1).model

# Inferir em uma imagem local
resultados = model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/24.tif", confidence=15, overlap=40).json()

nome_imagem = os.path.basename("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/24.tif")

# Processar os resultados e adicionar os dados das caixas delimitadoras à lista
dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    area = largura * altura
    dados_caixas_delimitadoras.append({'Imagem': nome_imagem, 'Classe': classe, 'Área': area})

# Criar um DataFrame do pandas com os dados das caixas delimitadoras
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

# Salvar o DataFrame em um arquivo Excel
arquivo_excel = f"resultados_caixas_delimitadoras_{nome_imagem}.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

# visualize your prediction
nome_arquivo_saida = f"{nome_imagem}_confidence=15_overlap=40.jpg"
model.predict("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/24.tif", confidence=15, overlap=40).save(nome_arquivo_saida)

# Imprimir mensagem de conclusão
print(f"Classificação das imagens concluída. Resultados das caixas delimitadoras salvos em {arquivo_excel}.")

dados_caixas_delimitadoras = []
for predicao in resultados['predictions']:
    # Extrair as informações relevantes da caixa delimitadora
    classe = predicao['class']
    x, y, largura, altura = predicao['x'], predicao['y'], predicao['width'], predicao['height']
    # Calcular a área da caixa delimitadora, se necessário
    area = largura * altura
    # Armazenar as informações em um dicionário
    dados_caixas_delimitadoras.append({'Classe': classe, 'x': x, 'y': y, 'Largura': largura, 'Altura': altura, 'Área': area})

import pandas as pd
df_caixas_delimitadoras = pd.DataFrame(dados_caixas_delimitadoras)

arquivo_excel = "resultados_caixas_delimitadoras_24.tif.xlsx"
df_caixas_delimitadoras.to_excel(arquivo_excel, index=False)

import matplotlib.pyplot as plt

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_24.tif.xlsx")  # Substitua "caminho_da_planilha.xlsx" pelo caminho correto do seu arquivo

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Plotar o gráfico
plt.figure(dpi=300)
img = plt.imread("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/24.tif_confidence=15_overlap=40.jpg")
plt.scatter(x, y, color="red")
plt.imshow(img)
plt.show()

# Salvar a planilha com os resultados
dados.to_excel("resultados_caixas_delimitadoras_24.tif.xlsx")
from osgeo import gdal, osr

tif = gdal.Open("/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/24.tif")
gt = tif.GetGeoTransform()

x_min = gt[0]
x_size = gt[1]
y_min = gt[3]
y_size = gt[5]

# Ler a planilha
dados = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_24.tif.xlsx", index_col=0)

# Obter os valores das colunas X e Y
x = dados["x"]
y = dados["y"]

# Calcular as coordenadas em pixels para cada ponto
px = x * x_size + x_min  # Coordenadas X em pixels
py = y * y_size + y_min  # Coordenadas Y em pixels

# Adicionar as coordenadas em pixels na planilha
dados["Pixel_X"] = px
dados["Pixel_Y"] = py

# Salvar a planilha com os resultados
dados.to_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/resultados_caixas_delimitadoras_24.tif.xlsx")

import pandas as pd

# Criar uma lista vazia para armazenar as planilhas
planilhas = []

# Iterar sobre os números de 1 a 24 para carregar as planilhas
for numero_planilha in range(1, 25):
    # Construir o nome do arquivo da planilha
    nome_arquivo = f"resultados_caixas_delimitadoras_{numero_planilha}.tif.xlsx"

    # Ler cada planilha e adicioná-la à lista
    planilha = pd.read_excel(nome_arquivo)
    planilhas.append(planilha)

# Concatenar as planilhas em uma única planilha
planilha_final = pd.concat(planilhas)

# Salvar a planilha final em um arquivo Excel
nome_arquivo_final = "planilha_final.xlsx"  # Especifique o nome desejado para o arquivo final
planilha_final.to_excel(nome_arquivo_final, index=False)

# Imprimir mensagem de conclusão
print(f"Todas as planilhas foram juntadas em {nome_arquivo_final}.")

df = pd.read_excel("/content/gdrive/MyDrive/Detection/Oficial/Imagens classificadas e resultados/planilha_final.xlsx", index_col=0)
df = df[df["Classe"] == "Araucaria"]
df.reset_index(inplace=True, drop=True)
df.to_excel("planilha_filtrada_final.xlsx")

"""Script abaixo realiza a determinação do tamanho do pixel, ajuda a obter a área na conversão


"""

from osgeo import gdal

# Abrir a imagem com o GDAL
dataset = gdal.Open('/content/gdrive/MyDrive/Detection/Oficial/Imagens sem classificação/1.tif')

# Obter a largura e altura da imagem
largura = dataset.RasterXSize
altura = dataset.RasterYSize

# Obter as informações de transformação
transformacao = dataset.GetGeoTransform()

# Calcular o tamanho do pixel em largura e altura
tamanho_pixel_largura = transformacao[1]
tamanho_pixel_altura = abs(transformacao[5])

# Exibir os tamanhos dos pixels
print("Tamanho do Pixel (Largura):", tamanho_pixel_largura)
print("Tamanho do Pixel (Altura):", tamanho_pixel_altura)